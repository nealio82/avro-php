<?php

namespace Avro;

use Avro\Datum\IOBinaryDecoder;
use Avro\Datum\IOBinaryEncoder;
use Avro\GMP\GMP;
use PHPUnit\Framework\TestCase;

class LongEncodingTest extends TestCase
{
    protected function setUp(): void
    {
        Avro::checkPlatform();
    }

    /**
     * @dataProvider bitShiftProvider
     */
    public function testBitShift(
        string $val,
        int $shift,
        string $expectedLval,
        string $expectedRval,
        string $lbin,
        string $rbin
    ): void {
        $this->skip64BitTestOn32Bit();

        $lval = ((int) $val << $shift);
        $this->assertBitShift($expectedLval, (string) $lval, 'lshift', $lbin, decbin($lval));

        $rval = ((int) $val >> $shift);
        $this->assertBitShift($expectedRval, (string) $rval, 'rshift', $rbin, decbin($rval));
    }

    /**
     * @dataProvider bitShiftProvider
     */
    public function testLeftShiftGmp(
        string $val,
        int $shift,
        string $expectedLval,
        string $expectedRval,
        string $lbin,
        string $rbin
    ): void {
        $this->skipIfNoGmp();

        $lval = gmp_strval(GMP::shiftLeft($val, $shift));
        $this->assertBitShift($expectedLval, $lval, 'gmp left shift', $lbin, decbin((int) $lval));
    }

    /**
     * @dataProvider bitShiftProvider
     */
    public function testRightShiftGmp(
        string $val,
        int $shift,
        string $expectedLval,
        string $expectedRval,
        string $lbin,
        string $rbin
    ): void {
        $this->skipIfNoGmp();

        $rval = gmp_strval(GMP::shiftRight($val, $shift));
        $this->assertBitShift($expectedRval, $rval, 'gmp right shift', $rbin, decbin((int) $rval));
    }

    public function bitShiftProvider(): iterable
    {
        // val shift lval rval lbin rbin
        yield ['0', 0, '0', '0', '0', '0'];
        yield ['0', 1, '0', '0', '0', '0'];
        yield ['0', 7, '0', '0', '0', '0'];
        yield ['0', 63, '0', '0', '0', '0'];
        yield ['1', 0, '1', '1', '1', '1'];
        yield ['1', 1, '2', '0', '10', '0'];
        yield ['1', 7, '128', '0', '10000000', '0'];
        yield ['1', 63, '-9223372036854775808', '0', '1000000000000000000000000000000000000000000000000000000000000000', '0'];
        yield ['100', 0, '100', '100', '1100100', '1100100'];
        yield ['100', 1, '200', '50', '11001000', '110010'];
        yield ['100', 7, '12800', '0', '11001000000000', '0'];
        yield ['100', 63, '0', '0', '0', '0'];
        yield ['1000000', 0, '1000000', '1000000', '11110100001001000000', '11110100001001000000'];
        yield ['1000000', 1, '2000000', '500000', '111101000010010000000', '1111010000100100000'];
        yield ['1000000', 7, '128000000', '7812', '111101000010010000000000000', '1111010000100'];
        yield ['1000000', 63, '0', '0', '0', '0'];
        yield ['2147483647', 0, '2147483647', '2147483647', '1111111111111111111111111111111', '1111111111111111111111111111111'];
        yield ['2147483647', 1, '4294967294', '1073741823', '11111111111111111111111111111110', '111111111111111111111111111111'];
        yield ['2147483647', 7, '274877906816', '16777215', '11111111111111111111111111111110000000', '111111111111111111111111'];
        yield ['2147483647', 63, '-9223372036854775808', '0', '1000000000000000000000000000000000000000000000000000000000000000', '0'];
        yield ['10000000000', 0, '10000000000', '10000000000', '1001010100000010111110010000000000', '1001010100000010111110010000000000'];
        yield ['10000000000', 1, '20000000000', '5000000000', '10010101000000101111100100000000000', '100101010000001011111001000000000'];
        yield ['10000000000', 7, '1280000000000', '78125000', '10010101000000101111100100000000000000000', '100101010000001011111001000'];
        yield ['10000000000', 63, '0', '0', '0', '0'];
        yield ['9223372036854775807', 0, '9223372036854775807', '9223372036854775807', '111111111111111111111111111111111111111111111111111111111111111', '111111111111111111111111111111111111111111111111111111111111111'];
        yield ['9223372036854775807', 1, '-2', '4611686018427387903', '1111111111111111111111111111111111111111111111111111111111111110', '11111111111111111111111111111111111111111111111111111111111111'];
        yield ['9223372036854775807', 7, '-128', '72057594037927935', '1111111111111111111111111111111111111111111111111111111110000000', '11111111111111111111111111111111111111111111111111111111'];
        yield ['9223372036854775807', 63, '-9223372036854775808', '0', '1000000000000000000000000000000000000000000000000000000000000000', '0'];
        yield ['-1', 0, '-1', '-1', '1111111111111111111111111111111111111111111111111111111111111111', '1111111111111111111111111111111111111111111111111111111111111111'];
        yield ['-1', 1, '-2', '-1', '1111111111111111111111111111111111111111111111111111111111111110', '1111111111111111111111111111111111111111111111111111111111111111'];
        yield ['-1', 7, '-128', '-1', '1111111111111111111111111111111111111111111111111111111110000000', '1111111111111111111111111111111111111111111111111111111111111111'];
        yield ['-1', 63, '-9223372036854775808', '-1', '1000000000000000000000000000000000000000000000000000000000000000', '1111111111111111111111111111111111111111111111111111111111111111'];
        yield ['-100', 0, '-100', '-100', '1111111111111111111111111111111111111111111111111111111110011100', '1111111111111111111111111111111111111111111111111111111110011100'];
        yield ['-100', 1, '-200', '-50', '1111111111111111111111111111111111111111111111111111111100111000', '1111111111111111111111111111111111111111111111111111111111001110'];
        yield ['-100', 7, '-12800', '-1', '1111111111111111111111111111111111111111111111111100111000000000', '1111111111111111111111111111111111111111111111111111111111111111'];
        yield ['-100', 63, '0', '-1', '0', '1111111111111111111111111111111111111111111111111111111111111111'];
        yield ['-1000000', 0, '-1000000', '-1000000', '1111111111111111111111111111111111111111111100001011110111000000', '1111111111111111111111111111111111111111111100001011110111000000'];
        yield ['-1000000', 1, '-2000000', '-500000', '1111111111111111111111111111111111111111111000010111101110000000', '1111111111111111111111111111111111111111111110000101111011100000'];
        yield ['-1000000', 7, '-128000000', '-7813', '1111111111111111111111111111111111111000010111101110000000000000', '1111111111111111111111111111111111111111111111111110000101111011'];
        yield ['-1000000', 63, '0', '-1', '0', '1111111111111111111111111111111111111111111111111111111111111111'];
        yield ['-2147483648', 0, '-2147483648', '-2147483648', '1111111111111111111111111111111110000000000000000000000000000000', '1111111111111111111111111111111110000000000000000000000000000000'];
        yield ['-2147483648', 1, '-4294967296', '-1073741824', '1111111111111111111111111111111100000000000000000000000000000000', '1111111111111111111111111111111111000000000000000000000000000000'];
        yield ['-2147483648', 7, '-274877906944', '-16777216', '1111111111111111111111111100000000000000000000000000000000000000', '1111111111111111111111111111111111111111000000000000000000000000'];
        yield ['-2147483648', 63, '0', '-1', '0', '1111111111111111111111111111111111111111111111111111111111111111'];
        yield ['-10000000000', 0, '-10000000000', '-10000000000', '1111111111111111111111111111110110101011111101000001110000000000', '1111111111111111111111111111110110101011111101000001110000000000'];
        yield ['-10000000000', 1, '-20000000000', '-5000000000', '1111111111111111111111111111101101010111111010000011100000000000', '1111111111111111111111111111111011010101111110100000111000000000'];
        yield ['-10000000000', 7, '-1280000000000', '-78125000', '1111111111111111111111101101010111111010000011100000000000000000', '1111111111111111111111111111111111111011010101111110100000111000'];
        yield ['-10000000000', 63, '0', '-1', '0', '1111111111111111111111111111111111111111111111111111111111111111'];
        yield ['-9223372036854775808', 0, '-9223372036854775808', '-9223372036854775808', '1000000000000000000000000000000000000000000000000000000000000000', '1000000000000000000000000000000000000000000000000000000000000000'];
        yield ['-9223372036854775808', 1, '0', '-4611686018427387904', '0', '1100000000000000000000000000000000000000000000000000000000000000'];
        yield ['-9223372036854775808', 7, '0', '-72057594037927936', '0', '1111111100000000000000000000000000000000000000000000000000000000'];
        yield ['-9223372036854775808', 63, '0', '-1', '0', '1111111111111111111111111111111111111111111111111111111111111111'];
    }

    /**
     * @dataProvider longProvider
     */
    public function testEncodeLong(string $value, string $expectedBytes): void
    {
        $this->skip64BitTestOn32Bit();
        $bytes = IOBinaryEncoder::encodeLong($value);
        $this->assertEquals($expectedBytes, $bytes);
    }

    /**
     * @dataProvider longProvider
     */
    public function testGmpEncodeLong(string $value, string $expectedBytes): void
    {
        $this->skipIfNoGmp();
        $bytes = GMP::encodeLong($value);
        $this->assertEquals($expectedBytes, $bytes);
    }

    /**
     * @dataProvider longProvider
     */
    public function testDecodeLongFromArray(string $expectedValue, string $bytes): void
    {
        $this->skip64BitTestOn32Bit();
        $array = array_map('ord', str_split($bytes));
        $value = IOBinaryDecoder::decodeLongFromArray($array);
        $this->assertEquals($expectedValue, $value);
    }

    /**
     * @dataProvider longProvider
     */
    public function testGmpDecodeLongFromArray(string $expectedValue, string $bytes): void
    {
        $this->skipIfNoGmp();
        $array = array_map('ord', str_split($bytes));
        $value = GMP::decodeLongFromArray($array);
        $this->assertEquals($expectedValue, $value);
    }

    public function longProvider(): iterable
    {
        yield ['0', "\x0"];
        yield ['1', "\x2"];
        yield ['7', "\xe"];
        yield ['10000', "\xa0\x9c\x1"];
        yield ['2147483647', "\xfe\xff\xff\xff\xf"];
        yield ['98765432109', "\xda\x94\x87\xee\xdf\x5"];
        yield ['-1', "\x1"];
        yield ['-7', "\xd"];
        yield ['-10000', "\x9f\x9c\x1"];
        yield ['-2147483648', "\xff\xff\xff\xff\xf"];
        yield ['-98765432109', "\xd9\x94\x87\xee\xdf\x5"];
    }

    private function assertBitShift(
        string $expected,
        string $actual,
        string $shiftType,
        string $expectedBinary,
        string $actualBinary
    ): void {
        $this->assertEquals(
            $expected,
            $actual,
            sprintf(
                "%s\nexpected: %d\n  actual: %d\nexpected b: %s\n  actual b: %s",
                $shiftType,
                $expected,
                $actual,
                $expectedBinary,
                $actualBinary
            )
        );
    }

    private function is64Bit(): bool
    {
        return PHP_INT_SIZE === 8;
    }

    private function skip64BitTestOn32Bit(): void
    {
        if (!$this->is64Bit()) {
            $this->markTestSkipped('Requires 64-bit platform');
        }
    }

    private function skipIfNoGmp(): void
    {
        if (!extension_loaded('gmp')) {
            $this->markTestSkipped('Requires GMP PHP Extension.');
        }
    }
}
